{"version":3,"sources":["components/CurrentCityData/CurrentCityData.module.scss","components/search/Search.tsx","components/CurrentCityData/CurrentityData.tsx","components/dailyCityData/DailyCityData.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/search/Search.module.scss","components/dailyCityData/DailyCityData.module.scss"],"names":["module","exports","Search","getCityInfo","searchCityResults","inputTextChangeHandler","inputEl","keyPressHandler","selected","className","styles","container","wrapper","input","placeholder","onKeyDown","e","key","ref","onChange","target","value","resultWrapper","map","item","i","active","result","onClick","url","name","country","CityData","region","city","weatherData","cityInfo","day","date","Date","getDate","getDay","month","getMonth","today","temperatureWrapper","currentTemperature","current","temp_c","dot","src","condition","icon","alt","DailyCityData","forecastToday","forecast","forecastday","currentWeather","column","feelslike_c","wind_kph","daily_chance_of_rain","daily_chance_of_snow","maxtemp_c","mintemp_c","astro","sunrise","sunset","App","useState","inputValue","setInputValue","setSearchCityResults","setCountry","setRegion","setCity","setWeatherData","setSelected","useRef","axios","defaults","params","useEffect","get","normalize","replace","headers","then","data","q","units","days","Object","entries","reduce","acc","countr","slice","indexOf","length","navigateSuggestions","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e49d418d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CurrentCityData_container__1PyF4\",\"wrapper\":\"CurrentCityData_wrapper__tlu9y\",\"city\":\"CurrentCityData_city__2msaO\",\"day\":\"CurrentCityData_day__zgZqn\",\"currentTemperature\":\"CurrentCityData_currentTemperature__exUhd\",\"dot\":\"CurrentCityData_dot__n6xvo\",\"temperatureWrapper\":\"CurrentCityData_temperatureWrapper__3_Eiy\"};","import React, { FC, RefObject } from 'react';\nimport { CityType } from '../../Types';\nimport styles from './Search.module.scss';\n\ninterface Props {\n  inputEl: RefObject<HTMLInputElement>;\n  keyPressHandler: (key: string | number) => void;\n  inputTextChangeHandler: (value: string) => void;\n  searchCityResults: CityType[];\n  getCityInfo: (url: string, name: string, countr: string) => void;\n  selected: number;\n}\n\nconst Search: FC<Props> = ({\n  getCityInfo,\n  searchCityResults,\n  inputTextChangeHandler,\n  inputEl,\n  keyPressHandler,\n  selected,\n}) => {\n\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper}>\n        <input\n          className={styles.input}\n          placeholder=\"new york\"\n          onKeyDown={(e) => keyPressHandler(e.key)}\n          ref={inputEl}\n          onChange={(e) => inputTextChangeHandler(e.target.value)}\n        />\n        <div className={styles.resultWrapper}>\n          {searchCityResults?.map((item, i) => {\n            return (\n              <div\n              \n                className={selected === i ? styles.active : styles.result}\n                onClick={() => getCityInfo(item.url, item.name, item.country)}\n                key={item.url}\n              >\n                {item.name}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n","import React, { FC } from 'react';\nimport { WeatherDataType } from '../../Types';\nimport styles from './CurrentCityData.module.scss';\n\ninterface Props {\n  region: string;\n  city: string;\n  country: String;\n  weatherData: WeatherDataType;\n}\n\nconst CityData: FC<Props> = ({ region, city, country, weatherData }) => {\n  const today = () => {\n    const date = new Date().getDate();\n\n    const dayNum = new Date().getDay();\n    const days: { [key: string]: string } = {\n      '1': 'Monday',\n      '2': 'Tuesday',\n      '3': 'Wednesday',\n      '4': 'Thursday',\n      '5': 'Friday',\n      '6': 'Saturday',\n      '7': 'Sunday',\n    };\n\n    const months: { [key: string]: string } = {\n      '0': 'January',\n      '1': 'February',\n      '2': 'March',\n      '3': 'April',\n      '4': 'May',\n      '5': 'June',\n      '6': 'July',\n      '7': 'August',\n      '8': 'September',\n      '9': 'October',\n      '10': 'November',\n      '11': 'Devember',\n    };\n    const day = days[dayNum];\n    const month = months[new Date().getMonth()];\n\n    return `${day} ${date} ${month}`;\n  };\n  return (\n    <div className={styles.container}>\n      {region && (\n        <>\n          <div className={styles.wrapper}>\n            <div className={styles.cityInfo}>\n              <div className={styles.city}>{`${city}, ${country}`}</div>\n\n              <div className={styles.day}>{`${today()}`}</div>\n            </div>\n            <div className={styles.temperatureWrapper}>\n              <div className={styles.currentTemperature}>\n                <span>{weatherData?.current.temp_c}</span>\n                <div className={styles.dot}></div>\n              </div>{' '}\n              <img\n                src={`http:${weatherData?.current.condition.icon}`}\n                alt=\"weather condition\"\n              />\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default CityData;\n","import React, { FC } from 'react';\nimport { WeatherDataType } from '../../Types';\nimport styles from './DailyCityData.module.scss';\n\ninterface Props {\n  weatherData: WeatherDataType;\n}\n\nconst DailyCityData: FC<Props> = ({ weatherData }) => {\n  const forecastToday = weatherData?.forecast.forecastday[0];\n  const currentWeather = weatherData?.current;\n\n  return (\n    <div className={styles.container}>\n      {weatherData && (\n        <div className={styles.wrapper}>\n          <div className={styles.column}>\n            <div>{`Feels like: ${currentWeather.feelslike_c}°`}</div>\n            <div>{`Wind: ${currentWeather.wind_kph} km/h`}</div>\n            {/* <div>{`Wind direction: ${currentWeather.wind_degree} °`}</div> */}\n          </div>\n          <div className={styles.column}>\n            <div>{`Rain: ${forecastToday.day.daily_chance_of_rain}%`}</div>\n            <div>{`Snow: ${forecastToday.day.daily_chance_of_snow}%`}</div>\n          </div>\n          <div className={styles.column}>\n            <div>{`High: ${forecastToday.day.maxtemp_c}°`}</div>\n            <div>{`Low: ${forecastToday.day.mintemp_c}°`}</div>\n          </div>\n          <div className={styles.column}>\n            <div>{`Sunrise: ${forecastToday.astro.sunrise}`}</div>\n            <div>{`Sunset: ${forecastToday.astro.sunset}`}</div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DailyCityData;\n","import React, { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport Search from './components/search/Search';\nimport CityData from './components/CurrentCityData/CurrentityData';\nimport DailyCityData from './components/dailyCityData/DailyCityData';\nimport { CityType, WeatherDataType } from './Types';\n\nconst App = () => {\n  const [inputValue, setInputValue] = useState('');\n  const [searchCityResults, setSearchCityResults] = useState<CityType[]>();\n  const [country, setCountry] = useState<string>('Latvia');\n  const [region, setRegion] = useState<string>('Zilupe');\n  const [city, setCity] = useState<string>('Zilupe');\n  const [weatherData, setWeatherData] = useState<WeatherDataType>();\n  const [selected, setSelected] = useState(0);\n\n  const inputEl = useRef<HTMLInputElement>(null);\n\n  axios.defaults.params = {\n    key: '22aec32dda7c476e83f60437202811',\n  };\n\n  useEffect(() => {\n    axios\n      .get(\n        `http://api.weatherapi.com/v1/search.json?q=${inputValue\n          .normalize('NFD')\n          .replace(/[\\u0300-\\u036f]/g, '')}`,\n        {\n          headers: { 'Access-Control-Allow-Origin': '*' },\n        },\n      )\n      .then(({ data }) => setSearchCityResults(data));\n  }, [inputValue]);\n\n  const objectToApiUrl = (params: object) => {\n    return Object.entries(params).reduce((acc, [key, value]) => {\n      let accCopy = acc;\n      accCopy += `${key}=${value}&`;\n      return accCopy;\n    }, 'http://api.weatherapi.com/v1/forecast.json?');\n  };\n\n  useEffect(() => {\n    const url = objectToApiUrl({\n      q: region,\n      units: 'metric',\n      days: 3,\n    });\n\n    axios.get(url).then(({ data }) => {\n      setWeatherData(data);\n    });\n  }, [city]);\n\n  const inputTextChangeHandler = (value: string) => {\n    setInputValue(value);\n  };\n\n  const navigateSuggestions = (key: string | number) => {\n    if (key === 'ArrowUp' && selected) {\n      setSelected(selected - 1);\n    } else if (\n      key === 'ArrowDown' &&\n      searchCityResults &&\n      !(selected >= searchCityResults?.length! - 1)\n    ) {\n      setSelected(selected + 1);\n    }\n  };\n\n  const keyPressHandler = (key: string | number) => {\n    navigateSuggestions(key);\n\n    if (key === 'Enter' && searchCityResults![selected]) {\n      inputEl.current!.value = '';\n      setRegion(searchCityResults![selected].url);\n      setCity(\n        searchCityResults![selected].name.slice(\n          0,\n          searchCityResults![selected].name.indexOf(','),\n        ),\n      );\n      setCountry(searchCityResults![selected].country);\n      setSearchCityResults([]);\n      setSelected(0);\n    }\n  };\n\n  const getCityInfo = (url: string, name: string, countr: string) => {\n    setRegion(url);\n    setCity(name.slice(0, name.indexOf(',')));\n    setCountry(countr);\n    inputEl.current!.value = '';\n    setSearchCityResults([]);\n    setSelected(0);\n  };\n\n  const closeSearchSuggestions = (target: EventTarget) => {\n    if (target !== inputEl.current) {\n      setSearchCityResults([]);\n      inputEl.current!.value = '';\n      setSelected(0);\n    }\n  };\n\n  return (\n    <div onClick={(e) => closeSearchSuggestions(e.target)}>\n      <Search\n        selected={selected}\n        getCityInfo={getCityInfo}\n        searchCityResults={searchCityResults!}\n        inputTextChangeHandler={inputTextChangeHandler}\n        inputEl={inputEl}\n        keyPressHandler={keyPressHandler}\n      />\n      <CityData\n        region={region}\n        city={city}\n        country={country}\n        weatherData={weatherData!}\n      />\n\n      <DailyCityData weatherData={weatherData!} />\n    </div>\n  );\n};\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Search_container__2iEJB\",\"wrapper\":\"Search_wrapper__3Y6Tf\",\"input\":\"Search_input__23OqA\",\"resultWrapper\":\"Search_resultWrapper__3SZKo\",\"result\":\"Search_result__2ttwW\",\"active\":\"Search_active__nkpDC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"DailyCityData_wrapper__sGdvs\",\"container\":\"DailyCityData_container__3Ne_Z\",\"column\":\"DailyCityData_column__1gbYU\"};"],"sourceRoot":""}